#!/usr/bin/env escript
%% -*- erlang -*-
%%! -pa ebin -pa deps/metrics/ebin
% -config app.config

main(_) ->
    %ok = application:start(inets),
    error_logger:info_msg("plop"),
    %net_kernel:start([pub@localhost]),
    %auth:set_cookie(node(), pub),

    application:start(sasl),

    ok = application:start(pubsubpoll),
    random:seed(),
    metrics:add_writer(metrics_csv),
    {ok, _} = psp_user_test_sup:start(),
     
    %sys:log(pub, print),
    Client = 10000, % Number of clients
    Message = 100, % Number of messages
    Me = self(),
    ok = metrics_countdown:create(plop, Client * Message, fun(Time) ->
            error_logger:info_msg("Wouaaaaaais : ~w µs => ~w µs/message~n", [Time, Time / (Client * Message)])
            %exit(Me)
        end),
    {ok, _ChanA} = pubsubpoll:create_channel(chan_a, {name, "Robert"}),
    clients(Client),
    flood(Message),
    error_logger:info_msg("~w messages sent~n", [Message]),
    timer:sleep(1000000). % Arbitrary wait

%% Publish lots of dummy messages
flood(0) ->
    ok;
flood(Cpt) ->
    ok = pubsubpoll:publish([{name, "Robert"}, {flavor, "Strawberry"}]),
    %error_logger:info_msg("Flood ~w~n", [Cpt]),
    timer:sleep(random:uniform(1000)),
    flood(Cpt -1).

%% Create lots of clients
clients(Cpt) ->
    clients(Cpt, []).
clients(0, Clients) ->
    error_logger:info_msg("Clients created", []),
    {ok, Clients};
clients(Cpt, Clients) ->
    {ok, ClientPid} = pubsubpoll:create_client(),
    error_logger:info_msg("Client ~w created~n", [Cpt]),
    pubsubpoll:suscribe(ClientPid, chan_a),
    {ok, UserPid} = psp_user_test_sup:start_child(ClientPid, fun(Events) ->
        metrics_countdown:decr(plop, length(Events))
        %error_logger:info_msg("~p~n", [Events])
    end),
    psp_user_test:auto_poll(UserPid, 15000),
    clients(Cpt-1, [ClientPid | Clients]).

